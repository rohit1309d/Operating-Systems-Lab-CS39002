		     +--------------------------+
       	       	     |		CS39002		|
		     | PROJECT 2: USER PROGRAMS	|
		     | 	   DESIGN DOCUMENT     	|
		     +--------------------------+

---- GROUP ----

>> Fill in the names, roll numbers and email addresses of your group members.

Rohit Dhaipule 18CS10013 rohit1045d@gmail.com
Pruthvi Kantevari 18CS10024 pruthvikantevari@gmail.com

---- PRELIMINARIES ----


-- Replace syscall.c, syscall.h, process.c in userprog directory
-- Replace thread.c and thread.h in threads directory

			   ARGUMENT PASSING
			   ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

No additional data structures were added.

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?
--> Divide the file_name by spaces using strtok_r() then push elements from right to left to the stack
--> Push word align
--> Push a NULL address
--> Push char * (array) that points to the arguments in stack from right to left 
--> Push char ** to the last char * in stack
--> Push number of arguments (argc)
--> Push return address 

Overflow occurs when stack pointer points to kernel memory if that happens exit is called.



---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

The ptr in strtok_r() is provided by the caller. If we use strtok() the point where the last token was found is kept inside by the function and 
will be used on the next call to strtok().  There will be a possible data race condition where one thread would use the last token which may be from another thread.
 
>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.
1) Time inside the kernel reduces as shell will perform the parsing.
2) If we pass bad arguments, then system call is not called i.e. the shell checks whether it is executable before passing it to kernel to avoid kernel fail.

			     SYSTEM CALLS
			     ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

-- struct child_info
-- struct file_descriptor
-- The following attributes are added in struct thread
----- tid_t parent_id;          
----- struct list child_list;       
----- struct lock waiting_lock;
----- struct condition waiting_condition;      
----- int exit_status;
----- struct semaphore esema;
----- int gd_gen;
----- struct list files;

>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?
When a file is opened a list element containing a pointer to the file and the file descriptor is added to files list of the current thread.
File descriptors are unique within a single process.

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.
- for reading
    -- if fd =0 STDIN get characters from console 
    -- else if the fd is valid use file_read() function to read from a file 
- case of write
    -- if fd equals 1, write to the console (put_buf)
    -- else if fd is valid use file_write() function to write to a file 

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

The least number of times it can be called is 1, if all bytes are on the same page.
if they are distributed across pages byte by byte it can grow up to 4096 times.
If it’s only two bytes then they will be at minimum 1 call and at maximum 2 calls.
This can be improved if it allocate all data in one page.


>> B5: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.
 We first check for a pointer that it’s not NULL. Then check that it’s not in a kernel space. Finally we check that it’s page is loaded into virtual memory. 
 We free all of our resources inside process_exit which is always called (by exit system call which calls thread_exit() that calls process_exit or from page_fault() exception which also call thread_exit())


---- RATIONALE ----

>> B6: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

-- It’s the most simple way as mentioned by the helping document
-- It’s more straightforward and logical to do it this way.

>> B7: What advantages or disadvantages can you see to your design
>> for file descriptors?
Advantages : No need for synchronization between processes when referring to their file descriptors data because file descriptors are among processes not global
Disadvantages : Accessing a file descriptor is O(n),  n - no of file descriptors
for the current thread we have to iterate through the entire fd list. Could be O(1) if they were stored in an array but this can waste some space.
